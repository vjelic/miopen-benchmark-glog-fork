{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-c61e5ac9-236d-46d5-897c-0ec49863d6f1",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the function `atoi()` is used, which can lead to integer overflow if the input string represents a number larger than `INT_MAX`.\n\n## Mitigation Advice\n\nAvoid using `atoi()` function as it does not perform any error checking. It can cause undefined behavior for certain inputs. Instead, use safer alternatives such as `strtol()` or `sscanf()`, which provide error checking.\n\n## Source Code Fix Recommendation\n\nReplace the `atoi()` function with `strtol()`. Here is the corrected code:\n\n```cpp\n#include <cstdlib> // for strtol\n#include <climits> // for LONG_MAX, LONG_MIN\n\nchar *end;\nlong reps = strtol(argv[2], &end, 10);\nif (end == argv[2] || *end != '\\0' || reps > INT_MAX || reps < INT_MIN) {\n    // handle error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This header file is needed for the `strtol()` function.\n- `<climits>`: This header file is needed for `INT_MAX` and `INT_MIN`.\n\n## References\n\n- [CWE-681: Incorrect Conversion between Numeric Types](https://cwe.mitre.org/data/definitions/681.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "glog-ba605d86-395d-4e5e-b896-9a297b9fe8ec",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of functions that generate random numbers which are not suitable for security-critical operations. The `rand()` function, for example, is a weak random number generator because it uses a deterministic algorithm that can be easily predicted, especially if the seed is known or can be guessed.\n\nThe specific vulnerability sink `rand()*1.f/RAND_MAX` is an example of using a weak random number generator. This code generates a random floating-point number between 0 and 1. However, the randomness and unpredictability of the numbers generated by this code are not sufficient for security-critical operations.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographic random number generator instead of a weak one. Cryptographic random number generators are designed to be unpredictable and suitable for generating random numbers used in security-critical operations.\n\nIn C++, you can use the `std::random_device` class from the `<random>` library, which is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()*1.f/RAND_MAX` code with the following code:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(0, 1);\n\nfloat random_number = dis(gen);\n```\n\nThis code generates a random floating-point number between 0 and 1 using a cryptographic random number generator.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-c805a643-b715-488e-a4a7-d5b8f3aef870",
              "help": {
                "text": "",
                "markdown": "## Description\n\nIn C++ programming, the vulnerability \"Avoid Using Non-Cryptographic or Weak Random Number Generators\" refers to the use of functions that generate random numbers which are not suitable for security-critical operations. The `rand()` function, for example, is a weak random number generator because it uses a deterministic algorithm that can be easily predicted, especially if the seed is known or can be guessed.\n\nThe specific vulnerability sink `rand()*1.f/RAND_MAX` is an example of using a weak random number generator. This code generates a random floating-point number between 0 and 1. However, the randomness and unpredictability of the numbers generated by this code are not sufficient for security-critical operations.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, use a cryptographic random number generator instead of a weak one. Cryptographic random number generators are designed to be unpredictable and suitable for generating random numbers used in security-critical operations.\n\nIn C++, you can use the `std::random_device` class from the `<random>` library, which is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.\n\n## Source Code Fix Recommendation\n\nReplace the `rand()*1.f/RAND_MAX` code with the following code:\n\n```cpp\n#include <random>\n\nstd::random_device rd;\nstd::mt19937 gen(rd());\nstd::uniform_real_distribution<> dis(0, 1);\n\nfloat random_number = dis(gen);\n```\n\nThis code generates a random floating-point number between 0 and 1 using a cryptographic random number generator.\n\n## Library Dependencies\n\nThe code example requires the `<random>` library.\n\n## References\n\n- [CWE-338: Use of Cryptographically Weak PRNG](https://cwe.mitre.org/data/definitions/338.html)"
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-c61e5ac9-236d-46d5-897c-0ec49863d6f1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmark_wino.cpp"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 15,
                  "endLine": 36,
                  "endColumn": 19,
                  "charOffset": 984,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ba605d86-395d-4e5e-b896-9a297b9fe8ec",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensor.hpp"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 54,
                  "endLine": 220,
                  "endColumn": 59,
                  "charOffset": 5798,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-c805a643-b715-488e-a4a7-d5b8f3aef870",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Avoid Using Non-Cryptographic or Weak Random Number Generators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "tensor.hpp"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 65,
                  "endLine": 220,
                  "endColumn": 73,
                  "charOffset": 5809,
                  "charLength": 8,
                  "snippet": {
                    "text": "RAND_MAX",
                    "rendered": {
                      "text": "RAND_MAX",
                      "markdown": "`RAND_MAX`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}